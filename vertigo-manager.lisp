(load "~/quicklisp/setup.lisp")
(load "util.lisp")
(with-silenced-output '(ql:quickload :cl-graph))
(with-silenced-output '(ql:quickload :uiop))
(with-silenced-output '(ql:quickload :alexandria))
(with-silenced-output '(ql:quickload :graph-algorithms))
(with-silenced-output '(ql:quickload :cl-ppcre))
(with-silenced-output '(ql:quickload :cl-tui))
(use-package :cl-tui)
(load "vertigo.lisp")
(load "node-data.lisp")
(load "guns.lisp")
(load "player.lisp")
(load "player-info.lisp")
(load "round.lisp")
(load "size.lisp")
(load "team-selection.lisp")
(load "match-info.lisp")
(load "strats.lisp")
(load "ai.lisp")
(load "combat.lisp")
(load "map.lisp")
(load "game-stage.lisp")

(defun weight (edge) (cl-graph::value edge))

(defun print-with-tab (edge)
  (format t "   ~s ~d"
          (cl-graph::value (cl-graph::target-vertex edge))
          (weight edge))
  (terpri))

(defun print-node-and-children (v)
  (progn
    (format t "Node: ~s" (cl-graph::value v))
    (terpri)
    (print-node-data (get-node-data (cl-graph::value v)))
    (format t "Neighbors:")
    (terpri)
    (cl-graph:iterate-source-edges v 'print-with-tab)
    (terpri)))

(defun print-map (g)
  (cl-graph:iterate-vertexes g 'print-node-and-children))

(defun move-player (player-name dst-node)
  (let ((src-node (player-location player-name)))
    (remove-player player-name src-node)
    (add-player player-name dst-node)))

(defun remove-player (player-name node-name)
  (setf (players (gethash node-name *node-data-map*))
        (delete player-name
                (players (gethash node-name *node-data-map*)))))

(defun add-player (player-name node-name)
  (push player-name (players (gethash node-name *node-data-map*))))

(defun neighbors-of (vertex-val)
  (let ((neighbors nil)
        (vertex (cl-graph:find-vertex *MAP* vertex-val)))
    (cl-graph:iterate-neighbors vertex (lambda (v) (push (cl-graph::value v) neighbors)))
    neighbors))

(defun main ()
  (setf *random-state* (make-random-state t))
  (defparameter *team* (team-selection-stage))
  (defparameter *enemy-team* (get-enemy-team))
  (print (path-between :T-Spawn :Window))
  (init-enemy-info)
  (ai/reset-round-logic)
  (mapcar (lambda (player) (add-player player :T-Spawn)) *team*)
  (mapcar (lambda (enemy) (add-player enemy :CT-Spawn)) *enemy-team*)
  (gameplay-stage))

(main)
